package css

var cssColorsHandle = templ.NewOnceHandle()

templ GoasterCSSColors() {
	@cssColorsHandle.Once() {
		<style type="text/css" nonce={ templ.GetNonce(ctx) }>
/* [tempo] BEGIN - Do not edit! This section is auto-generated. */
:root{--_gtt-color-space: var(--gtt-color-space, oklab);--_gtt-color-default-base: var( --gtt-color-default-base, oklch(.554 .046 257.417) );--gtt-color-default-lightest: color-mix( in var(--_gtt-color-space), var(--_gtt-color-default-base) 10%, white );--gtt-color-default-lighter: color-mix( in var(--_gtt-color-space), var(--_gtt-color-default-base) 30%, white );--gtt-color-default-light: color-mix( in var(--_gtt-color-space), var(--_gtt-color-default-base) 70%, white );--gtt-color-default-dark: color-mix( in var(--_gtt-color-space), var(--_gtt-color-default-base) 70%, black );--gtt-color-default-darker: color-mix( in var(--_gtt-color-space), var(--_gtt-color-default-base) 30%, black );--gtt-color-default-darkest: color-mix( in var(--_gtt-color-space), var(--_gtt-color-default-base) 10%, black );--_gtt-color-success-base: var( --gtt-color-success-base, oklch(.723 .219 149.579) );--gtt-color-success-lightest: color-mix( in var(--_gtt-color-space), var(--_gtt-color-success-base) 10%, white );--gtt-color-success-lighter: color-mix( in var(--_gtt-color-space), var(--_gtt-color-success-base) 30%, white );--gtt-color-success-light: color-mix( in var(--_gtt-color-space), var(--_gtt-color-success-base) 70%, white );--gtt-color-success-dark: color-mix( in var(--_gtt-color-space), var(--_gtt-color-success-base) 70%, black );--gtt-color-success-darker: color-mix( in var(--_gtt-color-space), var(--_gtt-color-success-base) 30%, black );--gtt-color-success-darkest: color-mix( in var(--_gtt-color-space), var(--_gtt-color-success-base) 10%, black );--_gtt-color-error-base: var( --gtt-color-error-base, oklch(.637 .237 25.331) );--gtt-color-error-lightest: color-mix( in var(--_gtt-color-space), var(--_gtt-color-error-base) 10%, white );--gtt-color-error-lighter: color-mix( in var(--_gtt-color-space), var(--_gtt-color-error-base) 30%, white );--gtt-color-error-light: color-mix( in var(--_gtt-color-space), var(--_gtt-color-error-base) 70%, white );--gtt-color-error-dark: color-mix( in var(--_gtt-color-space), var(--_gtt-color-error-base) 70%, black );--gtt-color-error-darker: color-mix( in var(--_gtt-color-space), var(--_gtt-color-error-base) 30%, black );--gtt-color-error-darkest: color-mix( in var(--_gtt-color-space), var(--_gtt-color-error-base) 10%, black );--_gtt-color-warning-base: var( --gtt-color-warning-base, oklch(.769 .188 70.08) );--gtt-color-warning-lightest: color-mix( in var(--_gtt-color-space), var(--_gtt-color-warning-base) 10%, white );--gtt-color-warning-lighter: color-mix( in var(--_gtt-color-space), var(--_gtt-color-warning-base) 30%, white );--gtt-color-warning-light: color-mix( in var(--_gtt-color-space), var(--_gtt-color-warning-base) 70%, white );--gtt-color-warning-dark: color-mix( in var(--_gtt-color-space), var(--_gtt-color-warning-base) 70%, black );--gtt-color-warning-darker: color-mix( in var(--_gtt-color-space), var(--_gtt-color-warning-base) 30%, black );--gtt-color-warning-darkest: color-mix( in var(--_gtt-color-space), var(--_gtt-color-warning-base) 10%, black );--_gtt-color-info-base: var( --gtt-color-info-base, oklch(.623 .214 259.815) );--gtt-color-info-lightest: color-mix( in var(--_gtt-color-space), var(--_gtt-color-info-base) 10%, white );--gtt-color-info-lighter: color-mix( in var(--_gtt-color-space), var(--_gtt-color-info-base) 30%, white );--gtt-color-info-light: color-mix( in var(--_gtt-color-space), var(--_gtt-color-info-base) 70%, white );--gtt-color-info-dark: color-mix( in var(--_gtt-color-space), var(--_gtt-color-info-base) 70%, black );--gtt-color-info-darker: color-mix( in var(--_gtt-color-space), var(--_gtt-color-info-base) 30%, black );--gtt-color-info-darkest: color-mix( in var(--_gtt-color-space), var(--_gtt-color-info-base) 10%, black )}

/* [tempo] END */
    </style>
	}
}
